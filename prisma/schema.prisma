generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                  @id @default(autoincrement())
  email                String               @unique
  fullName             String               @db.VarChar(100)
  phoneNO              String
  governorate          String
  password             String
  address              String
  avatar               String?
  role                 Role                 @default(USER)
  isActive             Boolean              @default(true)
  createdAt            DateTime             @default(now())
  lastLogin            DateTime?
  resetPasswordToken   String?
  resetPasswordExpires DateTime?
  customer             Customer?
  receivedEmails       Email[]              @relation("EmailRecipient")
  sentEmails           Email[]              @relation("EmailSender")
  maintenanceRequests  MaintenanceRequest[] @relation("UserRequests")
  receivedNotification Notification[]       @relation("notificationsRecipient")
  senderNotification   Notification[]       @relation("notificationsSender")
  subadmin             SUBADMIN?
  technician           Technician?
}

model Customer {
  id   Int  @id
  user User @relation(fields: [id], references: [id])
}

model Technician {
  id               Int                  @id
  specialization   String?
  services         String?
  assignedRequests MaintenanceRequest[] @relation("TechnicianAssignments")
  user             User                 @relation(fields: [id], references: [id])
}

model SUBADMIN {
  id          Int     @id
  department  String?
  governorate String?
  user        User    @relation(fields: [id], references: [id])
}

model MaintenanceRequest {
  id                 Int           @id @default(autoincrement())
  customerId         Int
  technicianId       Int?
  governorate        String
  phoneNO            String
  address            String
  deviceType         String
  problemDescription String
  status             RequestStatus @default(PENDING)
  cost               Float?        @default(0)
  isPaid             Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               User          @relation("UserRequests", fields: [customerId], references: [id])
  technician         Technician?   @relation("TechnicianAssignments", fields: [technicianId], references: [id])
}

model Notification {
  id          Int      @id @default(autoincrement())
  senderId    Int
  recipientId Int
  content     String
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())
  title       String
  recipient   User     @relation("notificationsRecipient", fields: [recipientId], references: [id])
  sender      User     @relation("notificationsSender", fields: [senderId], references: [id])
}

model Email {
  id          Int      @id @default(autoincrement())
  subject     String
  content     String
  senderId    Int
  recipientId Int
  sentAt      DateTime @default(now())
  recipient   User     @relation("EmailRecipient", fields: [recipientId], references: [id])
  sender      User     @relation("EmailSender", fields: [senderId], references: [id])
}

enum Role {
  ADMIN
  SUBADMIN
  USER
  TECHNICAL
}

enum RequestStatus {
  PENDING
  ASSIGNED
  QUOTED
  IN_PROGRESS
  COMPLETED
  REJECTED
}
