
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User-related models
model User {
  id                  Int       @id @default(autoincrement())
  email               String    @unique
  fullName            String    @db.VarChar(100)
  phoneNO             String
  governorate         String
  password            String
  address             String
  avatar              String?
  role                Role      @default(USER)
  isActive            Boolean   @default(true)
  createdAt           DateTime  @default(now())
  lastLogin           DateTime?
  resetPasswordToken  String?
  resetPasswordExpires DateTime?

  // Relations
  customer            Customer?
  technician          Technician?
  subadmin               SUBADMIN?
  sentEmails          Email[]               @relation("EmailSender")
  receivedEmails      Email[]               @relation("EmailRecipient")
  notifications       Notification[]
  sms                 SMS[]
  complaints          Complaint[]
  reviews             Review[]
  payments            Payment[]
}

model Customer {
  id                  Int       @id
  user                User      @relation(fields: [id], references: [id])
  maintenanceRequests MaintenanceRequest[] @relation("UserRequests")
}

model Technician {
  id                  Int       @id
  user                User      @relation(fields: [id], references: [id])
  assignedRequests    MaintenanceRequest[] @relation("TechnicianAssignments")
  specialization      String?
  services            String?
}

model SUBADMIN {
  id                  Int       @id
  user                User      @relation(fields: [id], references: [id])
  department          String?
  governorate         String?
}

enum Role {
  ADMIN
  SUBADMIN
  USER
  TECHNICAL
}

// Maintenance-related models
model MaintenanceRequest {
  id            Int            @id @default(autoincrement())
  user          Customer       @relation("UserRequests", fields: [userID], references: [id])
  userID        Int
  technician    Technician?    @relation("TechnicianAssignments", fields: [technicalID], references: [id])
  technicalID   Int?
  governorate   String
  deviceType    String
  phoneNO       String
  address       String
  descProblem   String
  status        RequestStatus  @default(PENDING)
  fee           Decimal        @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  // Relations
  payments      Payment[]
  reviews       Review[]
  notifications Notification[]
  sms           SMS[]
}

enum RequestStatus {
  APPROVED
  PENDING
  REJECTED
  UNDERPROCESSING
  DONE
  CANCELLED
}

// Payment and Invoice models
model Payment {
  id                   Int                @id @default(autoincrement())
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  user                 User               @relation(fields: [userID], references: [id])
  userID               Int
  amount               Decimal
  paymentDate          DateTime           @default(now())
  paymentState         PaymentStatus
  transactionId        String?
  createdAt            DateTime           @default(now())
  invoice              Invoice?
}

model Invoice {
  id            Int      @id @default(autoincrement())
  payment       Payment  @relation(fields: [paymentId], references: [id])
  paymentId     Int      @unique
  invoiceNumber String   @unique
  createdAt     DateTime @default(now())
  pdfUrl        String?
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// Communication models
model Review {
  id                   Int                @id @default(autoincrement())
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  user                 User               @relation(fields: [userID], references: [id])
  userID               Int
  rating               Int
  comment              String
  createdAt            DateTime           @default(now())
}

model Notification {
  id                   Int                @id @default(autoincrement())
  user                 User               @relation(fields: [userID], references: [id])
  userID               Int
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  message              String
  createdAt            DateTime           @default(now())
  isUserRead           Boolean            @default(false)
  isTechRead           Boolean            @default(false)
  type                 NotificationType
}

model Email {
  id          Int      @id @default(autoincrement())
  sender      User     @relation("EmailSender", fields: [senderID], references: [id])
  senderID    Int
  recipient   User     @relation("EmailRecipient", fields: [recipientID], references: [id])
  recipientID Int
  subject     String
  body        String
  createdAt   DateTime @default(now())
  isRead      Boolean  @default(false)
}

model SMS {
  id                   Int                @id @default(autoincrement())
  user                 User               @relation(fields: [userID], references: [id])
  userID               Int
  maintenanceRequest   MaintenanceRequest @relation(fields: [maintenanceRequestID], references: [id])
  maintenanceRequestID Int
  message              String
  createdAt            DateTime           @default(now())
  isRead               Boolean            @default(false)
}

enum NotificationType {
  APP
  EMAIL
  SMS
}

// Other models
model Complaint {
  id        Int             @id @default(autoincrement())
  user      User            @relation(fields: [userID], references: [id])
  userID    Int
  message   String
  status    ComplaintStatus @default(OPEN)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

enum ComplaintStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Service {
  id          Int      @id @default(autoincrement())
  icon        String?
  title       String
  description String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Device {
  id        Int      @id @default(autoincrement())
  brand     String
  model     String
  type      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FAQ {
  id        Int      @id @default(autoincrement())
  question  String
  answer    String
  category  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentPage {
  id        Int      @id @default(autoincrement())
  title     String
  content   String   @db.Text
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}